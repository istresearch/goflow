name: build app

on:
  push:
    branches-ignore:
      - main
      - master
    tags:
      - 'v*'

jobs:
  test-code:
    runs-on: ubuntu-latest
    steps:
      - name: "Install dependencies"
        run: |-
          sudo apt -y update && sudo apt -y install pandoc gettext

      - uses: actions/checkout@v3

      - name: "Set up Go"
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'

      - name: "Build app"
        env:
          GOFLAGS: -p=2
        run: |-
          go build -v ./...

      - name: "Run tests"
        env:
          TEST_NAME: "Unit Tests"
        run: |-
          set +e
          go test ./... 2>&1 | tee test-results.txt
          set -e
          S=$? #non-0 means error
          if [ $S -eq 0 ]; then
            R="Test(s) Passed: ${TEST_NAME}"
            echo "::notice::$R"
            R=":white_check_mark: $R"
          else
            R="Test(s) '${TEST_NAME}' failed"
            echo "::error::$R"
            R=":x: $R"
          fi
          echo "### ${R}" >> $GITHUB_STEP_SUMMARY
          echo '---' >> $GITHUB_STEP_SUMMARY
          echo '```shell' >> $GITHUB_STEP_SUMMARY
          cat test-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: "Create Version"
        id: version_cfg
        # note: Go lang requires tag format: v0.12.3-4
        # see: https://stackoverflow.com/questions/62140832/why-golang-packages-have-to-be-v0-or-v1-and-not-v2020
        run: |-
          VER_BUILD=$(date +%H%M)
          VERSION_NUM="0.$(date +%y)$(date +%m).$(date +%d)-${VER_BUILD:0:3}"
          echo "VERSION_NUM=${VERSION_NUM}" >> $GITHUB_OUTPUT

      - name: "Tag alpha build"
        run: |-
          GIT_TAG=v${{ steps.version_cfg.outputs.VERSION_NUM }}
          git tag ${GIT_TAG}
          git push origin ${GIT_TAG}
          echo "::notice::Pushed alpha tag ${GIT_TAG} to repo"
